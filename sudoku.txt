def print_grid(grid):
    for row in grid:
        print(" ".join(map(str, row)))

def find_empty_location(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return i, j
    return None

def is_valid_move(grid, row, col, num):
    #Check if 'num' is not present in the current row and column
    for i in range(9):
        if grid[row][i] == num or grid[i][col] == num:
            return False

    # Check if 'num' is not present in the current 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(grid):
    empty_location = find_empty_location(grid)

    # If there is no empty location, the Sudoku is solved
    if not empty_location:
        return True

    row, col = empty_location

    # Try filling numbers 1 to 9
    for num in range(1, 10):
        if is_valid_move(grid, row, col, num):
            grid[row][col] = num

            # Recursively try to fill in the remaining Sudoku
            if solve_sudoku(grid):
                return True

            # If the current configuration doesn't lead to a solution, backtrack
            grid[row][col] = 0

    # If no number can be placed in the current position, backtrack
    return False

# 0 represents empty cells
sudoku_grid = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

print("Sudoku Puzzle:")
print_grid(sudoku_grid)
print("\nSolving...\n")

if solve_sudoku(sudoku_grid):
    print("Sudoku Solved:")
    print_grid(sudoku_grid)
else:
    print("No solution exists.")